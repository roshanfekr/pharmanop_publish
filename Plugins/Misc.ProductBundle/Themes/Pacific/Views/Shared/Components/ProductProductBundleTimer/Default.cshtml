@model ProductDetailsModel

@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Services.Configuration
@using Microsoft.AspNetCore.Mvc.ViewComponents
@using Nop.Plugin.Misc.ProductBundle.Service
@using Nop.Plugin.Misc.ProductBundle.Domain;
@using Nop.Services.Catalog


@inject Nop.Core.IStoreContext storeContext
@inject Nop.Core.IWorkContext workContext
@inject Nop.Services.Configuration.ISettingService settingService
@inject CatalogSettings catalogSettings
@inject IViewComponentSelector viewComponentSelector
@inject IProductBundleService productBundleService
@inject IProductBundleCategoryService productBundleCategoryService
@inject IPriceFormatter priceFormatter
@{
    Html.AddCssFileParts("~/Plugins/Misc.ProductBundle/Themes/Pacific/Content/SaleOfTheDay.css");

    var supportRtlClass = string.Empty;

    var supportRtl = this.ShouldUseRtlTheme();
    if (supportRtl)
    {
        Html.AddCssFileParts("~/Plugins/Misc.ProductBundle/Themes/Pacific/Content/SaleOfTheDay.rtl.css");

        supportRtlClass = "support-rtl";
    }

    Html.AddScriptParts(ResourceLocation.Footer, "~/Plugins/Misc.ProductBundle/Scripts/owl.carousel.min.js");
    Html.AddCssFileParts("~/Plugins/Misc.ProductBundle/Styles/owl.carousel.css");

    Html.AddScriptParts(ResourceLocation.Footer, "~/Plugins/Misc.ProductBundle/Themes/Pacific/Content/Scripts/SaleOfTheDay.min.js");

    //bool hasAnySpecialPrice = Model.ProductBundleListModel.Any(x => x.AmazingStartDate.HasValue && x.AmazingEndDate.HasValue);

    //if (hasAnySpecialPrice)
    //{
    Html.AddScriptParts(ResourceLocation.Footer, "~/Plugins/SevenSpikes.Core/Scripts/sevenspikes.core.min.js");
    Html.AddScriptParts(ResourceLocation.Footer, "~/Plugins/Misc.ProductBundle/Scripts/SaleOfTheDay.countdown.timer.min.js");
    @* } *@
}
@{

    object attributeCombinationIdObj;
    Model.CustomProperties.TryGetValue("AttributeCombinationId", out attributeCombinationIdObj);

    var attributeCombinationId = 0;
    if (attributeCombinationIdObj != null)
    {
        attributeCombinationId = Convert.ToInt32(attributeCombinationIdObj);
    }

    ProductBundleCategory productBundleCategory = null;
    var productBundle = productBundleService.GetAll(productId: Model.Id, attributeCombination: attributeCombinationId,
                            justValid: true).FirstOrDefault();
    if (productBundle != null)
    {
        productBundleCategory = productBundleCategoryService.GetById(productBundle.ProductBundleCategoryId.Value);
    }
    else
    {
        productBundle = productBundleService.GetAll(productId: Model.Id, justValid: true).FirstOrDefault();
        if (productBundle != null)
        {
            productBundleCategory = productBundleCategoryService.GetById(productBundle.ProductBundleCategoryId.Value);
        }
    }

}


<!--countdown timer-->
@{

    @if (productBundle != null && productBundleCategory != null)
    {
        <div class="sale-of-the-day-offer dtl-custom">
            <div class="overview">
                @*<div class="product-bundle-category-name">
                        <div class="center-name">@productBundleCategory.Name</div>
                    </div>*@
                <input type="hidden" id="countDownDate-@productBundle.Id" />
                @if (productBundle.AmazingStartDateUtc.HasValue && productBundle.AmazingEndDateUtc.HasValue)
                {
                    int dateTimeDifference = (int)(productBundle.AmazingEndDateUtc.Value - DateTime.UtcNow).TotalSeconds;

                    <div dir="ltr" class="countdown-timer" data-time="@dateTimeDifference">
                        <div class="timer-group days">
                            <span class="timer-info-box"></span>
                            <span class="timer-info-text"></span>
                        </div>
                        <div class="timer-group hours">
                            <span class="timer-info-box"></span>
                            <span class="timer-info-text"></span>
                        </div>
                        <div class="timer-group minutes">
                            <span class="timer-info-box"></span>
                            <span class="timer-info-text"></span>
                        </div>
                        <div class="timer-group seconds">
                            <span class="timer-info-box"></span>
                            <span class="timer-info-text"></span>
                        </div>
                    </div>
                }
            </div>
        </div>     
        }
}



@*@if (productBundle != null && productBundleCategory != null)
    {
        <input type="hidden" id="countDownDate-@productBundle.Id" />

        @if (productBundle.AmazingStartDateUtc.HasValue && productBundle.AmazingEndDateUtc.HasValue)
        {
            <script>
                var temp = new Date("@productBundle.AmazingEndDateUtc.Value.Year",
                    "@(productBundle.AmazingEndDateUtc.Value.Month - 1)", "@productBundle.AmazingEndDateUtc.Value.Day", "@productBundle.AmazingEndDateUtc.Value.Hour",
                    "@productBundle.AmazingEndDateUtc.Value.Minute", "@productBundle.AmazingEndDateUtc.Value.Second")
                document.getElementById("countDownDate-@productBundle.Id").value = temp;

                // Update the count down every 1 second
                var x = setInterval(function () {
                    // Get today's date and time
                    var now = new Date().getTime();
                    // Find the distance between now and the count down date
                    var date = new Date(document.getElementById("countDownDate-@productBundle.Id").value);
                    var distance = Date.parse(date) - now;
                    // Time calculations for days, hours, minutes and seconds
                    var days = Math.floor(distance / (1000 * 60 * 60 * 24));
                    var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                    var seconds = Math.floor((distance % (1000 * 60)) / 1000);

                    var strDays = "";
                    if (days > -1 && days < 10) {
                        strDays = "0" + days;
                    } else {
                        strDays = days;
                    }

                    var strHours = "";
                    if (hours > -1 && hours < 10) {
                        strHours = "0" + hours;
                    } else {
                        strHours = hours;
                    }

                    var strMinutes = "";
                    if (minutes > -1 && minutes < 10) {
                        strMinutes = "0" + minutes;
                    } else {
                        strMinutes = minutes;
                    }

                    var strSeconds = "";
                    if (seconds > -1 && seconds < 10) {
                        strSeconds = "0" + seconds;
                    } else {
                        strSeconds = seconds;
                    }

                    var ele = document.getElementsByClassName("timer-@productBundle.Id");
                    ele[0].innerHTML = strDays + ":" + strHours + ":"
                        + strMinutes + ":" + strSeconds;

                }, 1000);
            </script>
        }

        <div class="product-bundle-product-box"  >
            <span class="product-bundle-product-box-span-right">
                @productBundleCategory.Name
            </span>
            @if (productBundle.AmazingStartDateUtc.HasValue && productBundle.AmazingEndDateUtc.HasValue)
            {
                <span class="product-bundle-product-box-span-left timer-@productBundle.Id">
                    00:00:00:00
                </span>
            }
        </div>
    }*@



<input type="hidden" id="saleOfTheDayInfo"
       data-localization-day="@T("SevenSpikes.Plugins.SaleOfTheDay.Public.Day")" data-localization-days="@T("SevenSpikes.Plugins.SaleOfTheDay.Public.Days")"
       data-localization-hour="@T("SevenSpikes.Plugins.SaleOfTheDay.Public.Hour")" data-localization-hours="@T("SevenSpikes.Plugins.SaleOfTheDay.Public.Hours")"
       data-localization-minute="@T("SevenSpikes.Plugins.SaleOfTheDay.Public.Minute")" data-localization-minutes="@T("SevenSpikes.Plugins.SaleOfTheDay.Public.Minutes")"
       data-localization-second="@T("SevenSpikes.Plugins.SaleOfTheDay.Public.Second")" data-localization-seconds="@T("SevenSpikes.Plugins.SaleOfTheDay.Public.Seconds")">
