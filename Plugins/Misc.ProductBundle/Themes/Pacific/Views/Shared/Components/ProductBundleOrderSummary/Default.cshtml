@model ShoppingCartModel

@using Nop.Core
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Microsoft.AspNetCore.Mvc.ViewComponents
@using Nop.Plugin.Misc.ProductBundle.Service
@using Nop.Services.Media
@using Nop.Services.Catalog
@using Nop.Services.Seo
@using Nop.Plugin.Misc.ProductBundle.Domain

@inject IWebHelper webHelper
@inject IWorkContext workContext
@inject OrderSettings orderSettings
@inject IViewComponentSelector viewComponentSelector
@inject IProductBundleService productBundleService
@inject IProductService productService
@inject IPictureService pictureService
@inject IProductProductBundleMappingService productProductBundleMappingService
@inject IUrlRecordService urlRecordService
@inject IPriceFormatter priceFormatter

@{
    var onePageCheckoutClass = string.Empty;
    if (orderSettings.OnePageCheckoutEnabled)
    {
        onePageCheckoutClass = "one-page-checkout";
    }

    Html.AppendCssFileParts("~/Plugins/Misc.ProductBundle/Themes/Pacific/Content/css/productBundleOrderSummery.css");
}
<div class="order-summary-content @onePageCheckoutClass">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentBefore })
    @await Html.PartialAsync("_OrderReviewData", Model.OrderReviewData)
    @if (Model.Items.Count > 0)
    {
        if (Model.Warnings.Count > 0)
        {
            <div class="message-error">
                <ul>
                    @foreach (var warning in Model.Warnings)
                    {
                        <li>@warning</li>
                    }
                </ul>
            </div>
        }
        @*we add enctype = "multipart/form-data" because "File upload" attribute control type requires it*@
        <form asp-route="ShoppingCart" method="post" enctype="multipart/form-data" id="shopping-cart-form">
            <div class="cart-content">
                <div class="table-wrapper">
                    <table class="cart">
                        <colgroup>
                            @*@if (Model.ShowSku)
                                {
                                    <col width="1" />
                                }*@
                            @if (Model.ShowProductImages)
                            {
                                <col width="1" />
                            }
                            <col />
                            @if (Model.ShowVendorName)
                            {
                                <col />
                            }
                            <col width="1" />
                            <col />
                            <col />
                            @if (Model.IsEditable)
                            {
                                <col width="1" />
                            }
                        </colgroup>
                        <thead>
                            <tr>
                                @*@if (Model.ShowSku)
                                    {
                                        <th class="sku">
                                            @T("ShoppingCart.SKU")
                                        </th>
                                    }*@
                                @if (Model.ShowProductImages)
                                {
                                    <th class="product-picture">
                                        @T("ShoppingCart.Image")
                                    </th>
                                }
                                <th class="product">
                                    @T("ShoppingCart.Product(s)")
                                </th>
                                @if (Model.ShowVendorName)
                                {
                                    <th class="vendor">
                                        @T("ShoppingCart.VendorName")
                                    </th>
                                }
                                <th class="unit-price">
                                    @T("ShoppingCart.UnitPrice")
                                </th>
                                <th class="quantity">
                                    @T("ShoppingCart.Quantity")
                                </th>
                                <th class="subtotal">
                                    @T("ShoppingCart.ItemTotal")
                                </th>
                                @if (Model.IsEditable)
                                {
                                    <th class="remove-from-cart">
                                        @T("ShoppingCart.Remove")
                                    </th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @{var counter = 0;}
                            @foreach (var item in Model.Items)
                            {
                                var attributeCombinationId = item.CustomProperties.FirstOrDefault(cp => cp.Key == "AttributeCombinationId");
                                var productBundle = productBundleService.GetAll(productId: item.ProductId,
                                    attributeCombination: attributeCombinationId.Value != null ?
                                        Convert.ToInt32(attributeCombinationId.Value) : 0, justValid: true).FirstOrDefault();
                                IList<ProductProductBundleMapping> productProductBundles = new List<ProductProductBundleMapping>();
                                if (productBundle != null)
                                {
                                    productProductBundles = productProductBundleMappingService.GetByProductBundleId(productBundle.Id);
                                }

                                counter++;
                                <tr>
                                    @*@if (Model.ShowSku)
                                        {
                                            <td class="sku">
                                                <label class="td-title">@T("ShoppingCart.SKU"):</label>
                                                <span class="sku-number">@item.Sku</span>
                                            </td>
                                        }*@
                                    @if (Model.ShowProductImages)
                                    {
                                        <td class="product-picture">
                                            <a href="@Url.RouteUrl("Product", new {SeName = item.ProductSeName})"><img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" /></a>
                                        </td>
                                    }
                                    <td class="product">
                                        <a href="@Url.RouteUrl("Product", new {SeName = item.ProductSeName})" class="product-name">@item.ProductName</a>
                                        @if (!string.IsNullOrEmpty(item.AttributeInfo))
                                        {
                                            <div class="attributes">
                                                @Html.Raw(item.AttributeInfo)
                                            </div>
                                        }
                                        @if (!string.IsNullOrEmpty(item.RecurringInfo))
                                        {
                                            <div class="recurring-info">
                                                @Html.Raw(item.RecurringInfo)
                                            </div>
                                        }
                                        @if (!string.IsNullOrEmpty(item.RentalInfo))
                                        {
                                            <div class="rental-info">
                                                @Html.Raw(item.RentalInfo)
                                            </div>
                                        }
                                        @if (Model.IsEditable && item.AllowItemEditing)
                                        {
                                            var editCartItemUrl = Url.RouteUrl("Product", new { SeName = item.ProductSeName }, webHelper.CurrentRequestProtocol);
                                            editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid", item.Id.ToString());
                                            <div class="edit-item">
                                                <a href="@editCartItemUrl">@T("Common.Edit")</a>
                                            </div>
                                        }
                                        @if (item.Warnings.Count > 0)
                                        {
                                            <div class="message-error">
                                                <ul>
                                                    @foreach (var warning in item.Warnings)
                                                    {
                                                        <li>@Html.Raw(warning)</li>
                                                    }
                                                </ul>
                                            </div>
                                        }
                                    </td>
                                    @if (Model.ShowVendorName)
                                    {
                                        <td class="vendor">
                                            <label class="td-title">@T("ShoppingCart.VendorName"):</label>
                                            <span class="vendor-name">@item.VendorName</span>
                                        </td>
                                    }
                                    <td class="unit-price">
                                        <label class="td-title">@T("ShoppingCart.UnitPrice"):</label>
                                        <span class="product-unit-price">@item.UnitPrice</span>
                                    </td>
                                    <td class="quantity">
                                        <label class="td-title" for="itemquantity@(item.Id)">@T("ShoppingCart.Quantity"):</label>
                                        @if (Model.IsEditable)
                                        {
                                            if (item.AllowedQuantities.Count > 0)
                                            {
                                                <select name="itemquantity@(item.Id)" id="itemquantity@(item.Id)" class="qty-dropdown">
                                                    @foreach (var qty in item.AllowedQuantities)
                                                    {
                                                        <option selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
                                                    }
                                                </select>
                                            }
                                            else
                                            {
                                                <input name="itemquantity@(item.Id)" id="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input" />
                                            }

                                        }
                                        else
                                        {
                                            <span class="product-quantity">@item.Quantity</span>
                                        }
                                    </td>
                                    <td class="subtotal">
                                        <label class="td-title">@T("ShoppingCart.ItemTotal"):</label>
                                        <span class="product-subtotal">@item.SubTotal</span>
                                        @if (!string.IsNullOrEmpty(item.Discount))
                                        {
                                            <div class="discount">
                                                @T("ShoppingCart.ItemYouSave"): @item.Discount
                                            </div>
                                            if (item.MaximumDiscountedQty.HasValue)
                                            {
                                                <div class="discount-additional-info">
                                                    @T("ShoppingCart.MaximumDiscountedQty", item.MaximumDiscountedQty.Value)
                                                </div>
                                            }
                                        }


                                    </td>
                                    @if (Model.IsEditable)
                                    {
                                        <td class="remove-from-cart">
                                            @if (item.DisableRemoval)
                                            {
                                                <text>&nbsp;</text>
                                            }
                                            else
                                            {
                                                <input type="checkbox" id="remove-from-cart-@item.Id" name="removefromcart" value="@(item.Id)" />
                                                <span data-checkbox-id="remove-from-cart-@item.Id" class="remove-from-cart-item-action ico ico-delete"></span>
                                            }
                                        </td>

                                    }
                                </tr>
                                @foreach (var ppbItem in productProductBundles)
                                {
                                    var product = productService.GetProductById(ppbItem.ProductId);

                                    <tr class="cart-item-row">
                                        @if (Model.IsEditable)
                                        {
                                            <td class="remove-from-cart">
                                            </td>
                                        }
                                        @{
                                            var productSeName = urlRecordService.GetSeName(product);
                                        }
                                        @if (Model.ShowProductImages)
                                        {
                                            <td>
                                                <div class="product-picture">
                                                    @if (product != null)
                                                    {

                                                        var productPicture = productService.GetProductPicturesByProductId(product.Id).FirstOrDefault();
                                                        if (productPicture != null)
                                                        {
                                                            var picture = pictureService.GetPictureById(productPicture.PictureId);

                                                            var productPictureUrl = pictureService.GetPictureUrl(productPicture.PictureId, 80);
                                                            <text>
                                                                <a href="/@productSeName" target="_blank">
                                                                    <img alt="@(picture.AltAttribute)" src="@productPictureUrl" title="@(picture.TitleAttribute)">
                                                                </a>
                                                            </text>
                                                        }
                                                        else
                                                        {
                                                            var productPictureUrl = pictureService.GetPictureUrl(0, 80);
                                                            <text>
                                                                <a href="/@productSeName" target="_blank">
                                                                    <img alt="@(product.Name)" src="@productPictureUrl" title="@product.Name">
                                                                </a>
                                                            </text>
                                                        }
                                                    }
                                                </div>
                                            </td>
                                        }
                                        <td class="product">
                                            <a href="@Url.RouteUrl("Product", new {SeName = productSeName})" class="product-name">@product.Name</a>
                                        </td>
                                        @if (Model.ShowVendorName)
                                        {
                                            <td class="vendor">
                                            </td>
                                        }
                                        <td class="unit-price">
                                            @{
                                                var finalPriceFormated = priceFormatter.FormatPrice(product.Price);
                                            }
                                            <label class="td-title">@T("ShoppingCart.ItemTotal"):</label>
                                            <span class="product-unit-price">@finalPriceFormated</span>
                                        </td>
                                        <td class="quantity">
                                            <label class="td-title">@T("ShoppingCart.Quantity"):</label>
                                            <span class="product-quantity">@item.Quantity</span>
                                        </td>
                                        <td class="subtotal">
                                            @{
                                                var freePriceFormated = priceFormatter.FormatPrice(0);
                                            }
                                            <label class="td-title">@T("ShoppingCart.UnitPrice"):</label>
                                            <span class="product-unit-price">@freePriceFormated</span>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
                @if (Model.IsEditable && Model.Items.Count > 0 && Model.DisplayTaxShippingInfo)
                {
                    var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                    //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                    //of course, you can modify appropriate locales to include VAT info there
                    <div class="tax-shipping-info">
                        @T(inclTax ? "ShoppingCart.TaxShipping.InclTax" : "ShoppingCart.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                    </div>
                }
                <div class="cart-options">
                    @if (Model.IsEditable)
                    {
                        <div class="common-buttons">
                            <button type="submit" name="updatecart" class="button-2 update-cart-button">@T("ShoppingCart.UpdateCart")</button>
                            <button type="submit" name="continueshopping" class="button-2 continue-shopping-button">@T("ShoppingCart.ContinueShopping")</button>
                        </div>
                    }
                </div>
                <div class="cart-footer">
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryCartFooter })
                    @if (Model.IsEditable)
                    {
                        <div class="cart-collaterals">
                            <div class="deals">
                                <div class="coupon-box-wrapper">
                                    <div class="title">
                                        <strong>@T("ShoppingCart.DiscountCouponCode")</strong>
                                    </div>
                                    @await Html.PartialAsync("_DiscountBox", Model.DiscountBox)
                                </div>
                                <div class="giftcard-box-wrapper">
                                    <div class="title">
                                        <strong>@T("ShoppingCart.GiftCardCouponCode")</strong>
                                    </div>
                                    @await Html.PartialAsync("_GiftCardBox", Model.GiftCardBox)
                                </div>
                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentDeals })
                            </div>
                            @*<div class="shipping-wrapper">
                                <div class="title">
                                    <strong>@T("ShoppingCart.EstimateShipping")</strong>
                                </div>
                                  @await Component.InvokeAsync("EstimateShipping")
                            </div>*@
                        </div>
                    }
                </div>
                @if (Model.IsEditable)
                {
                    @await Component.InvokeAsync("CrossSellProducts")
                }
            </div>
            <div class="cart-info cart-info-stick">
                @if (Model.IsEditable)
                {
                    @await Html.PartialAsync("_CheckoutAttributes", Model)
                }
                @if (!Model.IsEditable)
                {
                    @await Component.InvokeAsync("SelectedCheckoutAttributes")
                }
                <div class="totals">
                    @await Component.InvokeAsync("OrderTotals", new { isEditable = Model.IsEditable })
                    @if (Model.IsEditable)
                    {
                        if (!string.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                        {
                            <div class="min-amount-warning">
                                @Model.MinOrderSubtotalWarning
                            </div>
                        }
                    }
                    @if (Model.IsEditable)
                    {
                        if (Model.TermsOfServiceOnShoppingCartPage)
                        {
                            <div id="terms-of-service-warning-box" title="@T("Checkout.TermsOfService")" style="display: none;">
                                <p>@T("Checkout.TermsOfService.PleaseAccept")</p>
                            </div>
                            <div class="terms-of-service">
                                <input id="termsofservice" type="checkbox" name="termsofservice" />
                                <label for="termsofservice">@T("Checkout.TermsOfService.IAccept")</label>
                                @if (Model.TermsOfServicePopup)
                                {
                                    <a class="read" id="read-terms">@T("Checkout.TermsOfService.Read")</a>
                                    <script asp-location="Footer">
                                        $(document).ready(function() {
                                            $('#read-terms').on('click',
                                                function(e) {
                                                    e.preventDefault();
                                                    displayPopupContentFromUrl(
                                                        '@Url.RouteUrl("TopicPopup", new {SystemName = "conditionsofuse"})',
                                                        '@T("Checkout.TermsOfService")');
                                                });
                                        });
                                    </script>
                                }
                                else
                                {
                                    <a class="read" id="read-terms" href="@Url.RouteUrl("Topic", new {SeName = Html.GetTopicSeName("conditionsofuse") })">@T("Checkout.TermsOfService.Read")</a>
                                }
                            </div>
                        }
                        <div class="checkout-buttons">
                            @if (string.IsNullOrEmpty(Model.MinOrderSubtotalWarning) && !Model.HideCheckoutButton)
                            {
                                <script asp-location="Footer">
                                    $(document).ready(function () {
                                        $('#checkout').on('click', function () {
                                            //terms of service
                                            var termOfServiceOk = true;
                                            if ($('#termsofservice').length > 0) {
                                                //terms of service element exists
                                                if (!$('#termsofservice').is(':checked')) {
                                                    $("#terms-of-service-warning-box").dialog();
                                                    termOfServiceOk = false;
                                                } else {
                                                    termOfServiceOk = true;
                                                }
                                            }
                                            return termOfServiceOk;
                                        });
                                    });
                                </script>
                                if (orderSettings.CheckoutDisabled)
                                {
                                    <div class="checkout-disabled">
                                        @T("Checkout.Disabled")
                                    </div>
                                }
                                else
                                {
                                    <button type="submit" id="checkout" name="checkout" value="checkout" class="button-1 checkout-button">
                                        @T("Checkout.Button")
                                    </button>
                                }
                            }
                        </div>
                        <div class="addon-buttons">
                            @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express)*@
                            @foreach (var pm in Model.ButtonPaymentMethodViewComponentNames)
                            {
                                @await Component.InvokeAsync(pm)
                            }
                        </div>
                    }
                </div>
            </div>
        </form>
    }
    else
    {
        <div class="no-data">
            @T("ShoppingCart.CartIsEmpty")
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentAfter })
</div>

<script asp-location="Footer">
    $(document).ready(function () {
        var container = '.order-summary-content';
        $('.remove-from-cart span.remove-from-cart-item-action', container).on('click', function () {
            $('#' + $(this).data('checkbox-id'), container).prop('checked', true);
            $('.update-cart-button', container).click();
        });
    });
</script>